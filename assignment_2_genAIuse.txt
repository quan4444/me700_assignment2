I prompted DeepSeek back and forth a couple times with exact details on how I want to implement the code. I've pasted all my inputs here.

Message 1:
in python, i'm trying to implement a 3D frames solver for the Direct Stiffness Method. i want my functions to follow Test-Driven Development, where functions are small modules that are testable. the expected inputs to my codes are frame geometry (node locations and element connectivity), element section properties (E, nu, A, I_z, I_y, I_p, J, local z-axis), nodal loading (forces and moments applied at given nodes), boundary conditions (supported displacements and rotations at given nodes). i want the code structure to be as follow: the node locations and element connectivity should be in their own class called "Mesh"; element section properties should be in a class called "MaterialParams", where users can input different sets of element section properties that are stored in different material subdomains (for example, subdomain 1 is assigned integer 1, subdomain 2 with different element section properties is assigned integer 2), and the elements can be assigned with different properties (for example, elements 1 to 10 belongs to subdomain 1, and elements 11 to 20 belongs to subdomain 2); the nodal loading and boundary conditions can be in the "BoundaryConditions" class. Finally, there should be a solver class that takes in "Mesh", "MaterialParams", and "BoundaryConditions", checks for potential errors in the inputs and ill-pose problem (i.e., too many unknowns for given number of equations, too many equations for number of unknowns), then solve for the unknown displacements and rotations at each node + solve for reaction forces and moments at the supported nodes using the Direct Stiffness Method. Please let me know if you have any questions before writing the code. Thanks.

Message 2:
1. Mesh Class: please store node locations as numpy array. element connectivity should be stored as numpy array. 2. MaterialParams Class: material properties should be stored as a dictionary. Subdomain assignment can be stored as a dictionary (for example, subdomain 1 with elements 1,2,3 is stored as {1:[1,2,3]}). if there's a better way to store this, go ahead. 3. BoundaryConditions Class: yes, you can store nodal loads and boundary conditions as dictionaries. nodes that are fixed can be stored in a list or array to be called later. 4. Solver Class: the solver should handle both 2D and 3D frames. isn't this trivial since you can set the 3rd dimension to 0 for 3D cases? 5. Error Checking: check for missing node or element definitions, incorrect material property assignments, insufficient boundary conditions. what are other errors you can think of? Let's finish discussing all these points before you generate a code.

Message 3:
Before you start coding, I want to check if your understanding of the direct stiffness method is the same as mine. To my knowledge, the procedure for the direct stiffness method looks something like this: After taking in inputs from user, we establish the local element stiffness matrices. Then, we can convert the local stiffness matrices to the global stiffness matrix using either an assumed local z-axis or assigned local z-axis. Then, we assemble the global stiffness matrix. Then, we partition the global stiffness matrix into a matrix with known forces+moments and unknown displacements, and a matrix with unknown forces+moments and known displacements. Then, we solve for the unknowns.

Message 4:
Awesome. please proceed to generate the codes according to test-driven development and make smaller functions. thanks a lot

Message 5:
will you please write the codes for solve_system? thanks